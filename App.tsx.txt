<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NASA Research - Exoplanet Analysis</title>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
            background: linear-gradient(135deg, #0f172a 0%, #1e3a8a 50%, #312e81 100%);
            color: #f1f5f9;
            height: 100vh;
            overflow: hidden;
        }

        .app-container {
            display: flex;
            height: 100vh;
        }

        /* Sidebar Styles */
        .sidebar {
            width: 280px;
            background: rgba(15, 23, 42, 0.9);
            backdrop-filter: blur(8px);
            border-right: 1px solid rgba(71, 85, 105, 0.5);
            display: flex;
            flex-direction: column;
        }

        .sidebar-header {
            padding: 24px;
            border-bottom: 1px solid rgba(71, 85, 105, 0.5);
        }

        .sidebar-header .logo {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .logo-icon {
            width: 32px;
            height: 32px;
            background: #2563eb;
            border-radius: 8px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
        }

        .logo-text h2 {
            font-size: 18px;
            color: white;
            margin-bottom: 4px;
        }

        .logo-text p {
            font-size: 12px;
            color: #94a3b8;
        }

        .sidebar-content {
            padding: 16px;
            flex: 1;
        }

        .sidebar-menu {
            display: flex;
            flex-direction: column;
            gap: 8px;
        }

        .menu-item {
            width: 100%;
            padding: 12px;
            background: none;
            border: none;
            border-radius: 8px;
            color: #cbd5e1;
            cursor: pointer;
            transition: all 0.2s;
            display: flex;
            align-items: center;
            gap: 12px;
            text-align: left;
        }

        .menu-item:hover {
            background: #1e293b;
            color: white;
        }

        .menu-item.active {
            background: #2563eb;
            color: white;
            box-shadow: 0 4px 12px rgba(37, 99, 235, 0.4);
        }

        .menu-icon {
            width: 20px;
            height: 20px;
        }

        .sidebar-footer {
            padding: 16px;
            border-top: 1px solid rgba(71, 85, 105, 0.5);
            text-align: center;
            font-size: 12px;
            color: #94a3b8;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }

        .header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 16px;
            background: rgba(15, 23, 42, 0.9);
            backdrop-filter: blur(8px);
            border-bottom: 1px solid rgba(71, 85, 105, 0.5);
        }

        .header-left {
            display: flex;
            align-items: center;
            gap: 12px;
        }

        .header-title {
            font-size: 20px;
            color: white;
        }

        .header-right {
            font-size: 14px;
            color: #94a3b8;
        }

        .content-area {
            flex: 1;
            overflow-y: auto;
            background: rgba(15, 23, 42, 0.5);
            padding: 24px;
        }

        /* Card Styles */
        .card {
            background: rgba(30, 41, 59, 0.5);
            border: 1px solid #374151;
            border-radius: 8px;
            margin-bottom: 24px;
        }

        .card-header {
            padding: 24px 24px 16px 24px;
            border-bottom: 1px solid #374151;
        }

        .card-title {
            color: white;
            font-size: 18px;
            margin-bottom: 8px;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .card-content {
            padding: 24px;
        }

        /* Grid Layouts */
        .grid {
            display: grid;
            gap: 24px;
        }

        .grid-cols-1 { grid-template-columns: 1fr; }
        .grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
        .grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
        .grid-cols-4 { grid-template-columns: repeat(4, 1fr); }

        @media (min-width: 768px) {
            .md\\:grid-cols-2 { grid-template-columns: repeat(2, 1fr); }
            .md\\:grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
            .md\\:grid-cols-4 { grid-template-columns: repeat(4, 1fr); }
        }

        @media (min-width: 1280px) {
            .xl\\:grid-cols-3 { grid-template-columns: repeat(3, 1fr); }
            .xl\\:col-span-2 { grid-column: span 2; }
        }

        /* Badge Styles */
        .badge {
            display: inline-flex;
            align-items: center;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 12px;
            font-weight: 500;
        }

        .badge-primary { background: #2563eb; color: white; }
        .badge-secondary { background: #64748b; color: white; }
        .badge-success { background: #16a34a; color: white; }
        .badge-warning { background: #d97706; color: white; }
        .badge-danger { background: #dc2626; color: white; }
        .badge-outline { background: transparent; border: 1px solid #64748b; color: #cbd5e1; }

        /* Table Styles */
        .table {
            width: 100%;
            border-collapse: collapse;
        }

        .table th,
        .table td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #374151;
        }

        .table th {
            color: #cbd5e1;
            font-weight: 500;
        }

        .table td {
            color: #cbd5e1;
        }

        .table tbody tr:hover {
            background: rgba(55, 65, 81, 0.5);
        }

        /* Form Styles */
        .form-group {
            margin-bottom: 16px;
        }

        .form-label {
            display: block;
            margin-bottom: 8px;
            color: #cbd5e1;
            font-size: 14px;
        }

        .form-input,
        .form-textarea,
        .form-select {
            width: 100%;
            padding: 8px 12px;
            background: #374151;
            border: 1px solid #4b5563;
            border-radius: 6px;
            color: white;
            font-size: 14px;
        }

        .form-input:focus,
        .form-textarea:focus,
        .form-select:focus {
            outline: none;
            border-color: #2563eb;
            box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
        }

        /* Button Styles */
        .btn {
            padding: 8px 16px;
            border: none;
            border-radius: 6px;
            cursor: pointer;
            font-size: 14px;
            font-weight: 500;
            transition: all 0.2s;
            display: inline-flex;
            align-items: center;
            gap: 8px;
        }

        .btn-primary {
            background: #2563eb;
            color: white;
        }

        .btn-primary:hover {
            background: #1d4ed8;
        }

        .btn-primary:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid #4b5563;
            color: #cbd5e1;
        }

        .btn-outline:hover {
            background: #374151;
        }

        .btn-sm {
            padding: 6px 12px;
            font-size: 12px;
        }

        /* Progress Bar */
        .progress {
            width: 100%;
            height: 8px;
            background: #374151;
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-bar {
            height: 100%;
            background: #2563eb;
            transition: width 0.3s ease;
        }

        /* Chart Container */
        .chart-container {
            width: 100%;
            height: 320px;
            position: relative;
        }

        /* Utility Classes */
        .hidden { display: none; }
        .flex { display: flex; }
        .items-center { align-items: center; }
        .justify-between { justify-content: space-between; }
        .gap-2 { gap: 8px; }
        .gap-3 { gap: 12px; }
        .gap-4 { gap: 16px; }
        .gap-6 { gap: 24px; }
        .mb-2 { margin-bottom: 8px; }
        .mb-3 { margin-bottom: 12px; }
        .mb-4 { margin-bottom: 16px; }
        .mt-2 { margin-top: 8px; }
        .mt-4 { margin-top: 16px; }
        .text-center { text-align: center; }
        .text-white { color: white; }
        .text-blue-400 { color: #60a5fa; }
        .text-green-400 { color: #4ade80; }
        .text-yellow-400 { color: #facc15; }
        .text-purple-400 { color: #c084fc; }
        .text-orange-400 { color: #fb923c; }
        .text-red-400 { color: #f87171; }
        .text-slate-300 { color: #cbd5e1; }
        .text-slate-400 { color: #94a3b8; }
        .text-sm { font-size: 14px; }
        .text-lg { font-size: 18px; }
        .text-xl { font-size: 20px; }
        .text-2xl { font-size: 24px; }
        .text-3xl { font-size: 30px; }
        .flex-1 { flex: 1; }
        .w-full { width: 100%; }
        .w-24 { width: 96px; }
        .w-48 { width: 192px; }
        .min-w-64 { min-width: 256px; }
        .space-y-2 > * + * { margin-top: 8px; }
        .space-y-3 > * + * { margin-top: 12px; }
        .space-y-4 > * + * { margin-top: 16px; }
        .space-y-6 > * + * { margin-top: 24px; }
        .leading-relaxed { line-height: 1.625; }

        /* Animation */
        .animate-spin {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        .spinner {
            width: 16px;
            height: 16px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
        }
    </style>
</head>
<body>
    <div class="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <div class="logo">
                    <div class="logo-icon">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                    </div>
                    <div class="logo-text">
                        <h2>NASA Research</h2>
                        <p>Exoplanet Analysis</p>
                    </div>
                </div>
            </div>
            
            <div class="sidebar-content">
                <div class="sidebar-menu">
                    <button class="menu-item active" data-page="explorer">
                        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 13h8V3H3v10zm0 8h8v-6H3v6zm10 0h8V11h-8v10zm0-18v6h8V3h-8z"/>
                        </svg>
                        <span>Data Explorer</span>
                    </button>
                    <button class="menu-item" data-page="details">
                        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z"/>
                        </svg>
                        <span>Star/Planet Details</span>
                    </button>
                    <button class="menu-item" data-page="ml">
                        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                        </svg>
                        <span>ML Model</span>
                    </button>
                    <button class="menu-item" data-page="saved">
                        <svg class="menu-icon" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"/>
                        </svg>
                        <span>Saved Results</span>
                    </button>
                </div>
            </div>
            
            <div class="sidebar-footer">
                NASA Exoplanet Research Platform v2.1
            </div>
        </div>

        <!-- Main Content -->
        <div class="main-content">
            <div class="header">
                <div class="header-left">
                    <button class="btn btn-outline">
                        <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z"/>
                        </svg>
                    </button>
                    <h1 class="header-title" id="page-title">Data Explorer</h1>
                </div>
                <div class="header-right">
                    Mission: Kepler & TESS Data Analysis
                </div>
            </div>

            <div class="content-area" id="content-area">
                <!-- Content will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        // Global data
        const lightCurveData = [
            { time: 0, flux: 1.0002 },
            { time: 0.5, flux: 1.0001 },
            { time: 1.0, flux: 0.9998 },
            { time: 1.5, flux: 0.9995 },
            { time: 2.0, flux: 0.9991 },
            { time: 2.5, flux: 0.9988 },
            { time: 3.0, flux: 0.9987 },
            { time: 3.5, flux: 0.9989 },
            { time: 4.0, flux: 0.9993 },
            { time: 4.5, flux: 0.9997 },
            { time: 5.0, flux: 1.0001 },
            { time: 5.5, flux: 1.0003 },
            { time: 6.0, flux: 1.0002 }
        ];

        const datasetSample = [
            { id: "KIC-001", time: "2023.156", flux: 1.0002, quality: "Good", flag: "Transit" },
            { id: "KIC-002", time: "2023.157", flux: 1.0001, quality: "Good", flag: "Normal" },
            { id: "KIC-003", time: "2023.158", flux: 0.9998, quality: "Fair", flag: "Normal" },
            { id: "KIC-004", time: "2023.159", flux: 0.9995, quality: "Good", flag: "Transit" },
            { id: "KIC-005", time: "2023.160", flux: 0.9991, quality: "Poor", flag: "Transit" },
            { id: "KIC-006", time: "2023.161", flux: 0.9988, quality: "Good", flag: "Transit" }
        ];

        const planetDetails = {
            name: "Kepler-442b",
            type: "Super Earth",
            radius: "1.34 R⊕",
            temperature: "233 K",
            transitDepth: "0.089%",
            mission: "Kepler",
            hostStar: "Kepler-442",
            orbitalPeriod: "112.3 days",
            eccentricity: "0.04",
            equilibriumTemp: "233 ± 15 K",
            massEstimate: "2.3 M⊕",
            discoveryYear: "2015"
        };

        const stellarData = [
            { name: 'G-type', count: 45 },
            { name: 'K-type', count: 32 },
            { name: 'M-type', count: 78 },
            { name: 'F-type', count: 23 },
            { name: 'A-type', count: 12 }
        ];

        const planetDistribution = [
            { size: 0.5, temp: 200 },
            { size: 1.2, temp: 350 },
            { size: 2.1, temp: 150 },
            { size: 4.2, temp: 100 },
            { size: 8.5, temp: 80 },
            { size: 1.8, temp: 280 },
            { size: 0.8, temp: 400 }
        ];

        const starProperties = {
            name: "Kepler-442",
            spectralType: "K5V",
            mass: "0.61 M☉",
            radius: "0.60 R☉",
            temperature: "4402 K",
            metallicity: "-0.37 dex",
            age: "2.9 Gyr",
            distance: "1,206 ly",
            magnitude: "14.76 mag",
            luminosity: "0.12 L☉"
        };

        const planetProperties = {
            name: "Kepler-442b",
            radius: "1.34 R⊕",
            mass: "2.36 M⊕",
            orbitalPeriod: "112.31 days",
            transitDepth: "0.089%",
            eccentricity: "0.04",
            semiMajorAxis: "0.409 AU",
            equilibriumTemp: "233 K",
            insolation: "0.70 S⊕",
            density: "5.1 g/cm³"
        };

        const savedResults = [
            { id: "SR-001", name: "Kepler-442b Analysis", type: "Classification", date: "2023-10-15", classification: "Super Earth", confidence: 87.3, habitability: 0.72, status: "Confirmed" },
            { id: "SR-002", name: "K2-18b Transit Study", type: "Light Curve", date: "2023-10-14", classification: "Sub-Neptune", confidence: 92.1, habitability: 0.58, status: "Under Review" },
            { id: "SR-003", name: "TOI-715b Detection", type: "Classification", date: "2023-10-13", classification: "Rocky Planet", confidence: 78.9, habitability: 0.84, status: "Confirmed" },
            { id: "SR-004", name: "TRAPPIST-1e Analysis", type: "System Study", date: "2023-10-12", classification: "Rocky Planet", confidence: 95.7, habitability: 0.91, status: "Published" },
            { id: "SR-005", name: "Proxima Centauri b", type: "Classification", date: "2023-10-11", classification: "Rocky Planet", confidence: 89.4, habitability: 0.67, status: "Confirmed" },
            { id: "SR-006", name: "WASP-121b Study", type: "Atmospheric", date: "2023-10-10", classification: "Hot Jupiter", confidence: 99.2, habitability: 0.01, status: "Published" }
        ];

        // Application state
        let currentPage = 'explorer';
        let lightCurveChart = null;
        let stellarChart = null;
        let scatterChart = null;

        // Navigation
        function initNavigation() {
            const menuItems = document.querySelectorAll('.menu-item');
            menuItems.forEach(item => {
                item.addEventListener('click', () => {
                    const page = item.dataset.page;
                    navigateToPage(page);
                });
            });
        }

        function navigateToPage(page) {
            // Update active menu item
            document.querySelectorAll('.menu-item').forEach(item => {
                item.classList.remove('active');
            });
            document.querySelector(`[data-page="${page}"]`).classList.add('active');

            // Update page title
            const titles = {
                'explorer': 'Data Explorer',
                'details': 'Star/Planet Details',
                'ml': 'ML Model',
                'saved': 'Saved Results'
            };
            document.getElementById('page-title').textContent = titles[page];

            // Load page content
            currentPage = page;
            loadPageContent(page);
        }

        function loadPageContent(page) {
            const contentArea = document.getElementById('content-area');
            
            switch(page) {
                case 'explorer':
                    contentArea.innerHTML = getDataExplorerHTML();
                    setTimeout(() => createLightCurveChart(), 100);
                    break;
                case 'details':
                    contentArea.innerHTML = getStarPlanetDetailsHTML();
                    setTimeout(() => {
                        createStellarChart();
                        createScatterChart();
                    }, 100);
                    break;
                case 'ml':
                    contentArea.innerHTML = getMLModelHTML();
                    initMLModel();
                    break;
                case 'saved':
                    contentArea.innerHTML = getSavedResultsHTML();
                    initSavedResults();
                    break;
            }
        }

        // Data Explorer Page
        function getDataExplorerHTML() {
            return `
                <div class="grid grid-cols-1 xl:grid-cols-3 gap-6">
                    <div class="xl:col-span-2 space-y-6">
                        <!-- Light Curve Chart -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">
                                    Light Curve Analysis
                                    <span class="badge badge-primary">Transit Event Detected</span>
                                </div>
                            </div>
                            <div class="card-content">
                                <div class="chart-container">
                                    <canvas id="lightCurveChart"></canvas>
                                </div>
                            </div>
                        </div>

                        <!-- Dataset Table -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Dataset Sample</div>
                            </div>
                            <div class="card-content">
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>Time</th>
                                            <th>Flux</th>
                                            <th>Quality</th>
                                            <th>Flag</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        ${datasetSample.map(row => `
                                            <tr>
                                                <td>${row.id}</td>
                                                <td>${row.time}</td>
                                                <td>${row.flux}</td>
                                                <td><span class="badge ${getBadgeClass(row.quality)}">${row.quality}</span></td>
                                                <td><span class="badge ${row.flag === 'Transit' ? 'badge-warning' : 'badge-outline'}">${row.flag}</span></td>
                                            </tr>
                                        `).join('')}
                                    </tbody>
                                </table>
                            </div>
                        </div>
                    </div>

                    <!-- Planet Details Sidebar -->
                    <div class="space-y-6">
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Planet Details</div>
                            </div>
                            <div class="card-content space-y-4">
                                <div>
                                    <h3 class="text-lg text-blue-400">${planetDetails.name}</h3>
                                    <p class="text-sm text-slate-400">Confirmed Exoplanet</p>
                                </div>
                                
                                <div class="grid grid-cols-2 gap-3 text-sm">
                                    ${Object.entries(planetDetails).slice(1, -1).map(([key, value]) => `
                                        <div>
                                            <p class="text-slate-400">${formatKey(key)}</p>
                                            <p class="text-white">${value}</p>
                                        </div>
                                    `).join('')}
                                </div>
                                
                                <div style="padding-top: 12px; border-top: 1px solid #374151;">
                                    <p class="text-slate-400 text-sm">Discovery Year</p>
                                    <p class="text-white">${planetDetails.discoveryYear}</p>
                                </div>
                            </div>
                        </div>

                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Analysis Status</div>
                            </div>
                            <div class="card-content space-y-3">
                                <div class="flex items-center justify-between">
                                    <span class="text-slate-400">Transit Detected</span>
                                    <span class="badge badge-success">✓ Confirmed</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-slate-400">Data Quality</span>
                                    <span class="badge badge-secondary">High</span>
                                </div>
                                <div class="flex items-center justify-between">
                                    <span class="text-slate-400">Follow-up Required</span>
                                    <span class="badge badge-outline">Pending</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Star/Planet Details Page
        function getStarPlanetDetailsHTML() {
            return `
                <div class="space-y-6">
                    <!-- Overview Section -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">System Overview</div>
                        </div>
                        <div class="card-content">
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <h3 class="text-lg text-blue-400 mb-3">Kepler-442 System</h3>
                                    <p class="text-slate-300 leading-relaxed">
                                        The Kepler-442 system hosts a confirmed super-Earth exoplanet located in the 
                                        habitable zone of its K-type host star. Discovered through transit photometry 
                                        by the Kepler Space Telescope, this system represents one of the most Earth-like 
                                        planetary systems known to date.
                                    </p>
                                    <div class="mt-4 flex gap-2">
                                        <span class="badge badge-success">Habitable Zone</span>
                                        <span class="badge badge-secondary">Confirmed</span>
                                        <span class="badge badge-outline">K-Type Star</span>
                                    </div>
                                </div>
                                <div class="chart-container">
                                    <canvas id="scatterChart"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Stellar Classification Chart -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Stellar Classification Distribution</div>
                        </div>
                        <div class="card-content">
                            <div class="chart-container">
                                <canvas id="stellarChart"></canvas>
                            </div>
                        </div>
                    </div>

                    <!-- Properties Grid -->
                    <div class="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <!-- Star Properties -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Star Properties</div>
                            </div>
                            <div class="card-content space-y-3">
                                <div>
                                    <h4 class="text-blue-400 mb-2">${starProperties.name}</h4>
                                    <div class="space-y-2 text-sm">
                                        ${Object.entries(starProperties).slice(1).map(([key, value]) => `
                                            <div class="flex justify-between">
                                                <span class="text-slate-400">${formatKey(key)}</span>
                                                <span class="text-white">${value}</span>
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Planet Properties -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Planet Properties</div>
                            </div>
                            <div class="card-content space-y-3">
                                <div>
                                    <h4 class="text-green-400 mb-2">${planetProperties.name}</h4>
                                    <div class="space-y-2 text-sm">
                                        ${Object.entries(planetProperties).slice(1).map(([key, value]) => `
                                            <div class="flex justify-between">
                                                <span class="text-slate-400">${formatKey(key)}</span>
                                                <span class="text-white">${value}</span>
                                            </div>
                                        `).join('')}
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Related Data -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Related Data</div>
                            </div>
                            <div class="card-content space-y-4">
                                <div>
                                    <h4 class="text-orange-400 mb-3">Observational Data</h4>
                                    <div class="space-y-2 text-sm">
                                        <div>
                                            <span class="text-slate-400">Observed by Kepler</span>
                                            <p class="text-white">Q1-Q17</p>
                                        </div>
                                        <div>
                                            <span class="text-slate-400">Observed by TESS</span>
                                            <p class="text-white">Sector 15, 16</p>
                                        </div>
                                    </div>
                                </div>
                                
                                <div style="height: 1px; background: #374151; margin: 16px 0;"></div>
                                
                                <div>
                                    <h4 class="text-purple-400 mb-3">Classification</h4>
                                    <div class="space-y-2 text-sm">
                                        <div>
                                            <span class="text-slate-400">Classified by</span>
                                            <p class="text-white">NASA Exoplanet Archive</p>
                                        </div>
                                        <div>
                                            <span class="text-slate-400">Method</span>
                                            <p class="text-white">Transit Photometry</p>
                                        </div>
                                        <div>
                                            <span class="text-slate-400">Discovery Paper</span>
                                            <p class="text-white">Torres et al. (2015)</p>
                                        </div>
                                        <div>
                                            <span class="text-slate-400">Last Updated</span>
                                            <p class="text-white">2023-10-15</p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // ML Model Page
        function getMLModelHTML() {
            return `
                <div class="space-y-6">
                    <!-- Model Header -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-blue-400">
                                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                </svg>
                                Exoplanet Classification Model
                                <span class="badge badge-success">v2.1 Active</span>
                            </div>
                        </div>
                        <div class="card-content">
                            <p class="text-slate-300 leading-relaxed">
                                This machine learning model uses transit photometry data and stellar properties to classify 
                                exoplanets into different categories and assess their potential habitability. The model is 
                                trained on data from Kepler and TESS missions with confirmed exoplanet classifications.
                            </p>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <!-- Input Section -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Input Parameters</div>
                            </div>
                            <div class="card-content space-y-4">
                                <div class="grid grid-cols-2 gap-4">
                                    <div class="form-group">
                                        <label class="form-label">Transit Depth (%)</label>
                                        <input type="text" class="form-input" id="transitDepth" placeholder="0.089">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Orbital Period (days)</label>
                                        <input type="text" class="form-input" id="orbitalPeriod" placeholder="112.31">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Stellar Mass (M☉)</label>
                                        <input type="text" class="form-input" id="stellarMass" placeholder="0.61">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Stellar Radius (R☉)</label>
                                        <input type="text" class="form-input" id="stellarRadius" placeholder="0.60">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Stellar Temperature (K)</label>
                                        <input type="text" class="form-input" id="stellarTemp" placeholder="4402">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Planet Radius (R⊕)</label>
                                        <input type="text" class="form-input" id="planetRadius" placeholder="1.34">
                                    </div>
                                </div>

                                <div style="height: 1px; background: #374151; margin: 16px 0;"></div>

                                <div class="form-group">
                                    <label class="form-label">Bulk Data Input (CSV)</label>
                                    <textarea class="form-textarea" id="bulkData" placeholder="Paste CSV data or upload file..." rows="3"></textarea>
                                </div>

                                <div class="flex gap-3">
                                    <button class="btn btn-primary flex-1" id="runModelBtn">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M8 5v14l11-7z"/>
                                        </svg>
                                        Use Model
                                    </button>
                                    <button class="btn btn-outline">
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                        </svg>
                                        Upload CSV
                                    </button>
                                </div>
                            </div>
                        </div>

                        <!-- Results Section -->
                        <div class="card">
                            <div class="card-header">
                                <div class="card-title">Classification Results</div>
                            </div>
                            <div class="card-content" id="resultsContent">
                                <div class="text-center" style="padding: 3rem 0;">
                                    <svg width="64" height="64" viewBox="0 0 24 24" fill="#4b5563" style="margin: 0 auto 1rem;">
                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
                                    </svg>
                                    <p class="text-slate-400">Run the model to see classification results</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Model Performance -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">Model Performance</div>
                        </div>
                        <div class="card-content">
                            <div class="grid grid-cols-2 md:grid-cols-4 gap-6">
                                <div class="text-center">
                                    <div class="text-3xl text-blue-400 mb-1">94.2%</div>
                                    <div class="text-slate-400">Accuracy</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-3xl text-green-400 mb-1">91.8%</div>
                                    <div class="text-slate-400">Precision</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-3xl text-yellow-400 mb-1">96.5%</div>
                                    <div class="text-slate-400">Recall</div>
                                </div>
                                <div class="text-center">
                                    <div class="text-3xl text-purple-400 mb-1">94.1%</div>
                                    <div class="text-slate-400">F1 Score</div>
                                </div>
                            </div>
                            
                            <div style="height: 1px; background: #374151; margin: 24px 0;"></div>
                            
                            <div class="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                                <div>
                                    <span class="text-slate-400">Training Samples:</span>
                                    <span class="text-white" style="margin-left: 8px;">15,847</span>
                                </div>
                                <div>
                                    <span class="text-slate-400">Training Time:</span>
                                    <span class="text-white" style="margin-left: 8px;">2.3 hours</span>
                                </div>
                                <div>
                                    <span class="text-slate-400">Last Trained:</span>
                                    <span class="text-white" style="margin-left: 8px;">2023-10-12</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Saved Results Page
        function getSavedResultsHTML() {
            return `
                <div class="space-y-6">
                    <!-- Header -->
                    <div class="card">
                        <div class="card-header">
                            <div class="card-title">
                                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor" class="text-blue-400">
                                    <path d="M17 3H7c-1.1 0-1.99.9-1.99 2L5 21l7-3 7 3V5c0-1.1-.9-2-2-2z"/>
                                </svg>
                                Saved Analysis Results
                                <span class="badge badge-secondary" id="resultsCount">${savedResults.length} results</span>
                            </div>
                        </div>
                        <div class="card-content">
                            <p class="text-slate-300">
                                Access and manage your saved exoplanet analysis results, classifications, and research findings.
                            </p>
                        </div>
                    </div>

                    <!-- Filters and Search -->
                    <div class="card">
                        <div class="card-content">
                            <div class="flex flex-wrap gap-4 items-end">
                                <div class="flex-1 min-w-64">
                                    <label class="form-label">Search Results</label>
                                    <div style="position: relative;">
                                        <svg style="position: absolute; left: 12px; top: 50%; transform: translateY(-50%); color: #94a3b8;" width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                            <path d="M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z"/>
                                        </svg>
                                        <input type="text" class="form-input" id="searchInput" placeholder="Search by name or classification..." style="padding-left: 40px;">
                                    </div>
                                </div>
                                
                                <div class="w-48">
                                    <label class="form-label">Analysis Type</label>
                                    <select class="form-select" id="typeFilter">
                                        <option value="all">All Types</option>
                                        <option value="Classification">Classification</option>
                                        <option value="Light Curve">Light Curve</option>
                                        <option value="System Study">System Study</option>
                                        <option value="Atmospheric">Atmospheric</option>
                                    </select>
                                </div>

                                <div class="w-48">
                                    <label class="form-label">Status</label>
                                    <select class="form-select" id="statusFilter">
                                        <option value="all">All Status</option>
                                        <option value="Confirmed">Confirmed</option>
                                        <option value="Under Review">Under Review</option>
                                        <option value="Published">Published</option>
                                    </select>
                                </div>

                                <button class="btn btn-outline">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M3,2H21V2H21V4H20.92L14,10.92V22.91L10,18.91V10.91L3.09,4H3V2Z"/>
                                    </svg>
                                    Advanced
                                </button>
                            </div>
                        </div>
                    </div>

                    <!-- Results Table -->
                    <div class="card">
                        <div class="card-content">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>ID</th>
                                        <th>Name</th>
                                        <th>Type</th>
                                        <th>Date</th>
                                        <th>Classification</th>
                                        <th>Confidence</th>
                                        <th>Habitability</th>
                                        <th>Status</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody id="resultsTableBody">
                                    <!-- Table rows will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>

                    <!-- Quick Stats -->
                    <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
                        <div class="card">
                            <div class="card-content text-center" style="padding-top: 24px;">
                                <div class="text-3xl text-blue-400 mb-2">24</div>
                                <div class="text-slate-400">Total Results</div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-content text-center" style="padding-top: 24px;">
                                <div class="text-3xl text-green-400 mb-2">18</div>
                                <div class="text-slate-400">Confirmed</div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-content text-center" style="padding-top: 24px;">
                                <div class="text-3xl text-yellow-400 mb-2">4</div>
                                <div class="text-slate-400">Under Review</div>
                            </div>
                        </div>
                        
                        <div class="card">
                            <div class="card-content text-center" style="padding-top: 24px;">
                                <div class="text-3xl text-purple-400 mb-2">7</div>
                                <div class="text-slate-400">Published</div>
                            </div>
                        </div>
                    </div>

                    <!-- Bulk Actions -->
                    <div class="card">
                        <div class="card-content" style="padding-top: 24px;">
                            <div class="flex gap-4">
                                <button class="btn btn-primary">
                                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                        <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                    </svg>
                                    Export All Results
                                </button>
                                <button class="btn btn-outline">Backup to Archive</button>
                                <button class="btn btn-outline">Generate Report</button>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }

        // Chart functions
        function createLightCurveChart() {
            const ctx = document.getElementById('lightCurveChart');
            if (!ctx) return;

            if (lightCurveChart) {
                lightCurveChart.destroy();
            }

            lightCurveChart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: lightCurveData.map(d => d.time),
                    datasets: [{
                        label: 'Normalized Flux',
                        data: lightCurveData.map(d => d.flux),
                        borderColor: '#3B82F6',
                        backgroundColor: 'rgba(59, 130, 246, 0.1)',
                        borderWidth: 2,
                        pointBackgroundColor: '#3B82F6',
                        pointBorderColor: '#3B82F6',
                        pointRadius: 3
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#9CA3AF'
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Time (days)',
                                color: '#9CA3AF'
                            },
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Normalized Flux',
                                color: '#9CA3AF'
                            },
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        }
                    }
                }
            });
        }

        function createStellarChart() {
            const ctx = document.getElementById('stellarChart');
            if (!ctx) return;

            if (stellarChart) {
                stellarChart.destroy();
            }

            stellarChart = new Chart(ctx, {
                type: 'bar',
                data: {
                    labels: stellarData.map(d => d.name),
                    datasets: [{
                        label: 'Count',
                        data: stellarData.map(d => d.count),
                        backgroundColor: '#3B82F6',
                        borderRadius: 4
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#9CA3AF'
                            }
                        }
                    },
                    scales: {
                        x: {
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        },
                        y: {
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        }
                    }
                }
            });
        }

        function createScatterChart() {
            const ctx = document.getElementById('scatterChart');
            if (!ctx) return;

            if (scatterChart) {
                scatterChart.destroy();
            }

            scatterChart = new Chart(ctx, {
                type: 'scatter',
                data: {
                    datasets: [{
                        label: 'Planets',
                        data: planetDistribution.map(d => ({ x: d.size, y: d.temp })),
                        backgroundColor: '#3B82F6',
                        pointRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    plugins: {
                        legend: {
                            labels: {
                                color: '#9CA3AF'
                            }
                        }
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Planet Radius (R⊕)',
                                color: '#9CA3AF'
                            },
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        },
                        y: {
                            title: {
                                display: true,
                                text: 'Temperature (K)',
                                color: '#9CA3AF'
                            },
                            ticks: {
                                color: '#9CA3AF'
                            },
                            grid: {
                                color: '#374151'
                            }
                        }
                    }
                }
            });
        }

        // ML Model functionality
        function initMLModel() {
            const runModelBtn = document.getElementById('runModelBtn');
            if (runModelBtn) {
                runModelBtn.addEventListener('click', runClassification);
            }
        }

        function runClassification() {
            const btn = document.getElementById('runModelBtn');
            const resultsContent = document.getElementById('resultsContent');
            
            // Show loading state
            btn.disabled = true;
            btn.innerHTML = `
                <div class="spinner animate-spin"></div>
                Running Classification...
            `;
            
            // Simulate model running
            setTimeout(() => {
                // Mock results
                const results = {
                    classification: "Super Earth",
                    confidence: 87.3,
                    probability: {
                        "Rocky Planet": 12.7,
                        "Super Earth": 87.3,
                        "Neptune-like": 0.0,
                        "Gas Giant": 0.0
                    },
                    habitabilityScore: 0.72,
                    characteristics: [
                        "Potentially habitable",
                        "Rocky composition likely",
                        "Located in habitable zone"
                    ]
                };
                
                showResults(results);
                
                // Reset button
                btn.disabled = false;
                btn.innerHTML = `
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                        <path d="M8 5v14l11-7z"/>
                    </svg>
                    Use Model
                `;
            }, 3000);
        }

        function showResults(results) {
            const resultsContent = document.getElementById('resultsContent');
            
            resultsContent.innerHTML = `
                <div class="space-y-4">
                    <div class="text-center">
                        <h3 class="text-2xl text-green-400 mb-2">${results.classification}</h3>
                        <p class="text-slate-300">Confidence: ${results.confidence}%</p>
                        <div class="progress mt-2">
                            <div class="progress-bar" style="width: ${results.confidence}%"></div>
                        </div>
                    </div>

                    <div style="height: 1px; background: #374151; margin: 16px 0;"></div>

                    <div>
                        <h4 class="text-white mb-3">Classification Probabilities</h4>
                        <div class="space-y-2">
                            ${Object.entries(results.probability).map(([type, prob]) => `
                                <div class="flex justify-between items-center">
                                    <span class="text-slate-300">${type}</span>
                                    <div class="flex items-center gap-2">
                                        <div class="progress w-24">
                                            <div class="progress-bar" style="width: ${prob}%"></div>
                                        </div>
                                        <span class="text-white text-sm" style="width: 48px;">${prob}%</span>
                                    </div>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <div style="height: 1px; background: #374151; margin: 16px 0;"></div>

                    <div>
                        <h4 class="text-white mb-3">
                            Habitability Score: 
                            <span class="text-green-400">${results.habitabilityScore}</span>
                        </h4>
                        <div class="space-y-2">
                            ${results.characteristics.map(char => `
                                <div class="flex items-center gap-2">
                                    <div style="width: 8px; height: 8px; background: #4ade80; border-radius: 50%;"></div>
                                    <span class="text-slate-300">${char}</span>
                                </div>
                            `).join('')}
                        </div>
                    </div>

                    <button class="btn btn-outline w-full">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                        </svg>
                        Export Results
                    </button>
                </div>
            `;
        }

        // Saved Results functionality
        function initSavedResults() {
            populateResultsTable(savedResults);
            
            const searchInput = document.getElementById('searchInput');
            const typeFilter = document.getElementById('typeFilter');
            const statusFilter = document.getElementById('statusFilter');
            
            if (searchInput) {
                searchInput.addEventListener('input', filterResults);
            }
            if (typeFilter) {
                typeFilter.addEventListener('change', filterResults);
            }
            if (statusFilter) {
                statusFilter.addEventListener('change', filterResults);
            }
        }

        function filterResults() {
            const searchTerm = document.getElementById('searchInput')?.value.toLowerCase() || '';
            const typeFilter = document.getElementById('typeFilter')?.value || 'all';
            const statusFilter = document.getElementById('statusFilter')?.value || 'all';
            
            const filtered = savedResults.filter(result => {
                const matchesSearch = result.name.toLowerCase().includes(searchTerm) ||
                                    result.classification.toLowerCase().includes(searchTerm);
                const matchesType = typeFilter === 'all' || result.type === typeFilter;
                const matchesStatus = statusFilter === 'all' || result.status === statusFilter;
                
                return matchesSearch && matchesType && matchesStatus;
            });
            
            populateResultsTable(filtered);
            
            const resultsCount = document.getElementById('resultsCount');
            if (resultsCount) {
                resultsCount.textContent = `${filtered.length} results`;
            }
        }

        function populateResultsTable(results) {
            const tbody = document.getElementById('resultsTableBody');
            if (!tbody) return;
            
            tbody.innerHTML = results.map(result => `
                <tr>
                    <td class="text-slate-300">${result.id}</td>
                    <td class="text-white">${result.name}</td>
                    <td class="text-slate-300">${result.type}</td>
                    <td class="text-slate-300">${result.date}</td>
                    <td>${getClassificationBadge(result.classification)}</td>
                    <td class="text-white">${result.confidence}%</td>
                    <td class="${getHabitabilityColor(result.habitability)}">${result.habitability}</td>
                    <td>${getStatusBadge(result.status)}</td>
                    <td>
                        <div class="flex gap-2">
                            <button class="btn btn-outline btn-sm">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M11,9H13V7H11M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M11,17H13V11H11V17Z"/>
                                </svg>
                            </button>
                            <button class="btn btn-outline btn-sm">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z"/>
                                </svg>
                            </button>
                            <button class="btn btn-outline btn-sm" style="color: #f87171; border-color: #f87171;">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="currentColor">
                                    <path d="M19,4H15.5L14.5,3H9.5L8.5,4H5V6H19M6,19A2,2 0 0,0 8,21H16A2,2 0 0,0 18,19V7H6V19Z"/>
                                </svg>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
        }

        // Utility functions
        function getBadgeClass(quality) {
            switch(quality) {
                case 'Good': return 'badge-success';
                case 'Fair': return 'badge-secondary';
                case 'Poor': return 'badge-danger';
                default: return 'badge-outline';
            }
        }

        function getStatusBadge(status) {
            switch(status) {
                case 'Confirmed':
                    return '<span class="badge badge-success">Confirmed</span>';
                case 'Under Review':
                    return '<span class="badge badge-secondary">Under Review</span>';
                case 'Published':
                    return '<span class="badge badge-primary">Published</span>';
                default:
                    return `<span class="badge badge-outline">${status}</span>`;
            }
        }

        function getClassificationBadge(classification) {
            const colors = {
                "Super Earth": "badge-success",
                "Rocky Planet": "badge-warning", 
                "Sub-Neptune": "badge-primary",
                "Hot Jupiter": "badge-danger"
            };
            
            const badgeClass = colors[classification] || "badge-secondary";
            return `<span class="badge ${badgeClass}">${classification}</span>`;
        }

        function getHabitabilityColor(score) {
            if (score >= 0.7) return "text-green-400";
            if (score >= 0.4) return "text-yellow-400";
            return "text-red-400";
        }

        function formatKey(key) {
            return key.charAt(0).toUpperCase() + key.slice(1)
                .replace(/([A-Z])/g, ' $1')
                .replace(/Type$/, ' Type')
                .replace(/Temp$/, ' Temperature')
                .replace(/Axis$/, ' Axis');
        }

        // Initialize application
        document.addEventListener('DOMContentLoaded', function() {
            initNavigation();
            loadPageContent('explorer');
        });
    </script>
</body>
</html>
